#!/usr/bin/env ruby
print '

    Created by Blockchain IT,
    If you need Fullstack, Blockchain or DevOps services
    contact us on info@blockchain-it.hr

    Happy hacking ;)
    Edi

'

require 'yaml'
require 'erb'
require_relative 'helpers.rb'
include Helper

#####################################################################
# Initialize
#####################################################################

Helper.initialize
Helper.load_general_config


#####################################################################
# Setup config
#####################################################################
File.open('yaml/config/config.json', 'w') do |f|
  f.puts ERB.new(File.read('erb/config/config.json.erb'), nil, '-').result
end

File.open('yaml/config/configtx.yaml', 'w') do |f|
  f.puts ERB.new(File.read('erb/config/configtx.yaml.erb'), nil, '-').result
end

File.open('yaml/config/crypto-config.yaml', 'w') do |f|
  f.puts ERB.new(File.read('erb/config/crypto-config.yaml.erb'), nil, '-').result
end

#####################################################################
# Claims
#####################################################################
File.open('yaml/claims.yaml', 'w') do |f|
  f.puts ERB.new(File.read('erb/claims.yaml.erb'), nil, '-').result
end

#####################################################################
# Fabric tools
#####################################################################
File.open('yaml/fabric-tools.yaml', 'w') do |f|
  f.puts ERB.new(File.read('erb/fabric-tools.yaml.erb'), nil, '-').result
end

#####################################################################
# Hyperledger Explorer
#####################################################################
File.open('yaml/explorer.yaml', 'w') do |f|
  f.puts ERB.new(File.read('erb/explorer.yaml.erb'), nil, '-').result
end

#####################################################################
# Certificate Authority
#####################################################################
File.open('yaml/ca.yaml', 'w') do |f|
  f.puts ERB.new(File.read('erb/ca.yaml.erb'), nil, '-').result
end

#####################################################################
# Orderers
#####################################################################
File.open('yaml/orderers.yaml', 'w') do |f|
  f.puts ERB.new(File.read('erb/orderers.yaml.erb'), nil, '-').result
end

#####################################################################
# Peers
#####################################################################
File.open('yaml/peers.yaml', 'w') do |f|
  f.puts ERB.new(File.read('erb/peers.yaml.erb'), nil, '-').result
end


#####################################################################
# Helper methods
#####################################################################
module Helper

  def Helper.initialize
    @config = YAML.load_file('environment.yaml')
    @organizations = @config['organizations']
    @orderers = @config['orderers']
    return
  end

  def Helper.load_general_config
    @version = @config['version']
    @namespace = @config['namespace']
    @hostname = @config['hostname']
    @consortium_name = @config['consortium_name']
    @database_host = @config['database_host']
    @database_username = @config['database_username']
    @database_password = @config['database_password']
    @database_database = @config['database_database']
    @admin_username = @config['admin_username']
    @admin_password = @config['admin_password']
    @TZ = @config['TZ']
    return
  end

  def Helper.iterate_kafka_broker_list
    @orderers.each do |orderer|
      @brokers_list = orderer.values.first['CONFIGTX_ORDERER_KAFKA_BROKERS_LIST']
    end
    return
  end
end

def Helper.load_orderer_template_vars(values)
  @CONFIGTX_ORDERER_KAFKA_BROKERS = values['CONFIGTX_ORDERER_KAFKA_BROKERS']
  @CONFIGTX_ORDERER_ADDRESSES = values['CONFIGTX_ORDERER_ADDRESSES']
  @ORDERER_GENERAL_LISTENADDRESS = values['ORDERER_GENERAL_LISTENADDRESS']
  @ORDERER_GENERAL_LISTENPORT = values['ORDERER_GENERAL_LISTENPORT']
  @ORDERER_GENERAL_LOGLEVEL = values['ORDERER_GENERAL_LOGLEVEL']
  return
end

def load_peer_template_vars(values)
  @name = values['name']
  @selector = values['selector']
  return
end

def iterate_orderers
  @orderers.each do |orderer|
    @orderer_name = orderer.keys.first
    load_orderer_template_vars(orderer.values.first)
  end
end

def iterate_organizations
  @organizations.each do |organization|
    @organization_name = organization.keys.first
    organization.values.first.each do |peer|
      @peer_name = peer.keys.first
      load_peer_template_vars(peer.values.first)
    end
  end
end
